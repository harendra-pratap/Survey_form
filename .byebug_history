c
answer.question
question
answer
c
expect(JSON.parse(response.body))
c
cc
c
cc
c
cc
c
question.short?
c
question
c
question
question.short?
c
question
question.short?
c
question
question.short?
c
n
expect(JSON.parse(response.body)).to eq({ "error" => "Answer is required for question #{required_question.id}" })
JSON.parse(response.body)
n
c
        expect(JSON.parse(response.body)).to eq({ "error" => "Answer is required for question #{required_question.id}" })
JSON.parse(response.body)
expect(response).to have_http_status(:unprocessable_entity)
c
n
answer_data[:deleted]
c
n
c
n
answer_data[:deleted]
n
delete_params
n
c
paramsc
params
n
delete_params
n
c
n
survey_form
answer
question
c
n
question_with_answer
n
nn
n
JSON.parse(response.body)
n
survey_form.id
n
answer
survey_form
question
c
questions
JSON.parse(response.body)
n
c
quetions
parsed_response['survey_form']
n
question_with_answer = parsed_response['survey_form']['questions'].first
expect(parsed_response['survey_form']['title']).to eq(survey_form.title)
expect(parsed_response['survey_form']['id']).to eq(survey_form.id)
n
expect(response).to have_http_status(:ok)
n
survey_form.id
c
canswer_data[:deleted].to_b
answer_data[:deleted].to_b
answer_data[:deleted].to_boolean
answer_data[:deleted]
c
answer_data[:deleted]
c
n
answer_data[:deleted]
c
expect(JSON.parse(response.body))
expect(response).to have_http_status(:not_found)
c
n
answer_data[:deleted]
answer_data[:deleted] == true
n
params[:answers]
c
n
params[:answers]
c
n
c
n
answer_data[:deleted]
n
params[:answers]
c
n
c
n
answer_data[:deleted] == true
n
question
n
answer
c
n
question
n
answer
c
n
question.is_required
V
n
answer
c
n
c
expect(JSON.parse(response.body))
expect(JSON.parse(response.body)['errors'])
expect(response).to have_http_status(:unprocessable_entity)
c
expect(parsed_response['errors'])
expect(parsed_response['errors']
expect(parsed_response['errors'].first['error'])
parsed_response = JSON.parse(response.body)
c
n
question
n
answer_data[:question_id]
question_id
n
answer
c
n
answer_data
c
n
updated_params
answer.id
c
answer_data
answer_data[:id]
n
user
survey_form
answer
n
survey_form
answer
c
answer
answer_data
params[:answers]
n
answer.id
updated_params
answers
c
cc
c
expect(response.body).to include('question')
expect(response.body).to include('text')
expect(response.body)
n
expect(response.headers['Content-Disposition']).to start_with('attachment; filename="')
expect(response.headers['Content-Disposition'])
n
expect(response.headers['Content-Type']).to eq('text/csv')
n
c
n
c
n
Answer.includes(:question, :survey_form).where(survey_form_id: @survey_form.id).order(:user_id)
c
n
c
Answer.includes(:question, :survey_form).where(survey_form_id: @survey_form.id).order(:user_id)
n
survey_form.id
survey_form
n
survey_form
c
cc
c
cc
c
n
Answer.includes(:question, :survey_form).where(survey_form_id: @survey_form.id).order(:user_id)
n
survey_form
survey_form.update(user_id: user.id)
user
survey_form
c
n
survey_form.update(user_id: user.id)
survey_form
user
c
answer
survey_form
survey_form.id
c
user
user_id
survey_form
another_user
c
n
 expect(response).to have_http_status(:ok)
expect(response)
response
n
FactoryBot.create(:answer, user: user, survey_form: survey_form, question: question)
question
survey_form.id
c
n
@answer.user
@current_user
c
n
c
C
c
n
answer.id
user
answer
c
cc
c
n
answer.id
